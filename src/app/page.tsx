"use client";

import React from "react";
import Head from "next/head";
import { useState } from "react";
import output from "../declensions/output";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import RootLayout from "./layout";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import CapitalizeFirstLetter from "@/utils/CapitaliseFirstLetter";

const initialState = {
  verb: "",
  presentDeclension: null,
  present: false,
  imperfect: false,
  future: false,
  aorist: false,
  perfect: false,
  pluperfect: false,
  active: false,
  middle: false,
  passive: false,
  indicative: false,
  subjunctive: false,
  optative: false,
  imperative: false,
  tense: false,
  voice: false,
  mood: false,
  error: false,
};

export default function Home() {
  const [presentDeclension, setPresentDeclension] =
    useState<React.ReactElement | null>(null);

  const [data, setData] = useState<{
    [k: string]: boolean | string | React.ReactElement | null;
  }>(initialState);

  function handleChange(
    fieldName: string,
    fieldValue: boolean | string | React.ReactElement | null
  ) {
    setData((prev) => ({
      ...prev,
      [fieldName]: fieldValue,
    }));
  }

  const isTenseSelected = () => {
    setData((prev) => ({
      ...prev,
      tense: false,
    }));
    if (
      data.present ||
      data.imperfect ||
      data.aorist ||
      data.future ||
      data.perfect ||
      data.pluperfect === true
    ) {
      setData((prev) => ({
        ...prev,
        tense: true,
      }));
    }
  };

  const isVoiceSelected = () => {
    setData((prev) => ({
      ...prev,
      voice: false,
    }));
    if (data.active || data.middle || data.passive === true) {
      setData((prev) => ({
        ...prev,
        voice: true,
      }));
    }
  };

  const isMoodSelected = () => {
    setData((prev) => ({
      ...prev,
      mood: false,
    }));
    if (
      data.indicative ||
      data.subjunctive ||
      data.optative ||
      data.imperative === true
    ) {
      setData((prev) => ({
        ...prev,
        mood: true,
      }));
    }
  };

  console.log("Tense", data.tense);
  console.log("Mood", data.mood);
  console.log("Voice", data.voice);

  const submitForm = (e: any) => {
    e.preventDefault();
    // if (!tense && !voice && !mood) return;
    isTenseSelected(), isVoiceSelected(), isMoodSelected();

    if (data.tense === false || data.mood === false || data.voice === false) {
      console.log("There is a problem");
      return;
    } else {
      setPresentDeclension(
        output({
          verb: data.verb as string,
          active: data.active as boolean,
          middle: data.middle as boolean,
          passive: data.passive as boolean,
          indicative: data.indicative as boolean,
          subjunctive: data.indicative as boolean,
          optative: data.indicative as boolean,
          imperative: data.indicative as boolean,
          present: data.indicative as boolean,
          imperfect: data.indicative as boolean,
          future: data.indicative as boolean,
          aorist: data.indicative as boolean,
        })
      );
    }
  };

  const tenses = [
    "present",
    "imperfect",
    "future",
    "aorist",
    "perfect",
    "pluperfect",
  ];

  const moods = ["indicative", "subjunctive", "optative", "imperative"];

  const voices = ["active", "middle", "passive"];

  return (
    <RootLayout>
      <div>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="flex flex-col items-center justify-center pt-6 pl-12 pr-12 pb-12">
          <div className="w-5/6">
            <div className="text-4xl text-center pb-3">
              Smart Verb Declenator
            </div>
            <div className="flex justify-center items-center">
              <input
                className="mt-2 mb-2 pl-2 pr-2 border-2 border-white rounded-sm focus:border-b-blue-300"
                required
                id="verb"
                type="text"
                onChange={(e: any) => handleChange("verb", e.target.value)}
                value={data.verb as string}
              />
            </div>
            <div className="flex flex-col justify-center items-center">
              <Accordion type="multiple">
                <AccordionItem className="flex flex-col" value="item-1">
                  <AccordionTrigger>Choose Tense</AccordionTrigger>
                  <AccordionContent>
                    {tenses.map((t: string, index) => (
                      <div
                        key={index}
                        className="flex flex-row items-start space-x-3 space-y-2"
                      >
                        <Checkbox
                          required
                          id={t}
                          checked={data[`${t}`] as boolean}
                          onClick={() => handleChange(t, !data[`${t}`])}
                        />
                        <label
                          className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                          htmlFor="present"
                        >
                          {CapitalizeFirstLetter(t)}
                        </label>
                      </div>
                    ))}
                    {data.error && !data.tense && (
                      <div>Please check at least one tense</div>
                    )}
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem className="flex flex-col" value="item-2">
                  <AccordionTrigger>
                    <h3>Voice</h3>
                  </AccordionTrigger>
                  <AccordionContent>
                    {voices.map((v: string, index) => (
                      <div
                        key={index}
                        className="flex flex-row items-start space-x-3 space-y-2"
                      >
                        <Checkbox
                          required
                          id={v}
                          checked={data[`${v}`] as boolean}
                          onClick={() => handleChange(v, !data[`${v}`])}
                        />
                        <label
                          className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                          htmlFor="present"
                        >
                          {CapitalizeFirstLetter(v)}
                        </label>
                      </div>
                    ))}
                    {data.error && !data.voice && (
                      <div>Please check at least one voice</div>
                    )}
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-3" className="flex flex-col">
                  <AccordionTrigger>
                    <h3>Mood</h3>
                  </AccordionTrigger>
                  <AccordionContent>
                    {moods.map((m: string, index) => (
                      <div
                        key={index}
                        className="flex flex-row items-start space-x-3 space-y-2"
                      >
                        <Checkbox
                          required
                          id={m}
                          checked={data[`${m}`] as boolean}
                          onClick={() => handleChange(m, !data[`${m}`])}
                        />
                        <label
                          className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                          htmlFor="present"
                        >
                          {CapitalizeFirstLetter(m)}
                        </label>
                      </div>
                    ))}
                    {data.error && !data.mood && (
                      <div>Please check at least one tense</div>
                    )}
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </div>
            <div className="flex flex-col justify-center items-center">
              <Button variant={"outline"} id="verb" onClick={submitForm}>
                Submit
              </Button>
            </div>
            <div>
              {data.tense &&
              data.voice &&
              data.mood &&
              (data.verb as string).length
                ? presentDeclension
                : null}
            </div>
            <div>
              {data.error ? <div>Please check your options</div> : null}
            </div>
          </div>
        </main>
      </div>
    </RootLayout>
  );
}
